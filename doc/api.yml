openapi: 3.1.0
info:
  title: Restaurant Management API - 2025 [J]
  description: Restaurant Management API - 2025 [J]
  version: 1.0.0
servers:
  - url: 'https://localhost:8080'
paths:
  /ingredients:
    get:
      summary: Get list of ingredients
      description: List of ingredients
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: List of ingredients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ingredient'
  /ingredients/{id}/prices:
    put:
      summary: Add new prices to a specifc ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Price'
        required: true
      responses:
        200:
          description: The specific ingredient with updated price history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
  /ingredients/{id}/stockMovements:
    put:
      summary: Add new stock movements to a specifc ingredient
      parameters:
        - $ref: '#/components/parameters/IngredientIdentifier'
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/StockMovement'
        required: true
      responses:
        200:
          description: The specific ingredient with updated stockMovement history
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ingredient'
  /dishes:
    get:
      summary: Get dishes
      parameters:
        - $ref: '#/components/parameters/Page'
        - $ref: '#/components/parameters/PageSize'
      responses:
        200:
          description: List of dishes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Dish'
  /dishes/{id}/ingredients:
    put:
      summary: Compose a specific dish with some ingredients
      description: |
        In case the ingredients already exist, so only set required quantity for this specific dish.
        If ingredients do not exist (by its unique name), create ingredient and set required quantity at the same time for this specific dish.
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateDishIngredient'
      responses:
        200:
          description: Dish with new ingredients
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Dish'
components:
  parameters:
    IngredientIdentifier:
      in: path
      name: id
      schema:
        type: int
      required: true
    Page:
      in: query
      name: page
      schema:
        type: int
        required: false
    PageSize:
      in: query
      name: pageSize
      schema:
        type: int
        required: false
  schemas:
    CreateDishIngredient:
      allOf:
        - $ref: '#/components/schemas/IngredientBasicProperty'
      type: object
      properties:
        requiredQuantity:
          type: numeric
    Dish:
      type: object
      properties:
        id:
          type: int
        name:
          type: string
        availableQuantity:
          type: int
        actualPrice:
          type: float
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/DishIngredient'
    DishIngredient:
      type: object
      properties:
        requiredQuantity:
          type: float
        unit:
          $ref: '#/components/schemas/Unit'
        ingredient:
          $ref: '#/components/schemas/IngredientBasicProperty'
    IngredientBasicProperty:
      type: object
      properties:
        id:
          type: int
        name:
          type: string
    Ingredient:
      type: object
      properties:
        prices:
          type: array
          items:
            $ref: '#/components/schemas/Price'
        stockMovements:
          type: array
          items:
            $ref: '#/components/schemas/StockMovement'
        availableQuantity:
          type: float
        actualPrice:
          type: float
      allOf:
        - $ref: '#/components/schemas/IngredientBasicProperty'
    Price:
      type: object
      properties:
        id:
          type: int
        price:
          type: float
        dateValue:
          type: string
          format: date
    StockMovement:
      type: object
      properties:
        id:
          type: int
        quantity:
          type: float
        unit:
          $ref: '#/components/schemas/Unit'
        type:
          $ref: '#/components/schemas/StockMovementType'
        creationDatetime:
          type: string
          format: date-time
    StockMovementType:
      type: string
      enum:
        - IN
        - OUT
    Unit:
      type: string
      enum:
        - G
        - U
        - L